{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _react=_interopRequireDefault(require(\"react\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _reactNative=require(\"react-native\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var CustomDatePickerAndroid=function(_React$PureComponent){(0,_inherits2.default)(CustomDatePickerAndroid,_React$PureComponent);var _super=_createSuper(CustomDatePickerAndroid);function CustomDatePickerAndroid(){var _this;(0,_classCallCheck2.default)(this,CustomDatePickerAndroid);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.componentDidUpdate=function(prevProps){if(!prevProps.isVisible&&_this.props.isVisible){if(_this.props.mode===\"date\"||_this.props.mode===\"datetime\"){_this.showDatePickerAndroid().catch(console.error);}else{_this.showTimePickerAndroid().catch(console.error);}}};_this.componentDidMount=function(){if(_this.props&&_this.props.isVisible){if(_this.props.mode===\"date\"||_this.props.mode===\"datetime\"){_this.showDatePickerAndroid().catch(console.error);}else{_this.showTimePickerAndroid().catch(console.error);}}};_this.showDatePickerAndroid=(0,_asyncToGenerator2.default)(function*(){var picked;try{picked=yield _reactNative.DatePickerAndroid.open({date:_this.props.date,minDate:_this.props.minimumDate,maxDate:_this.props.maximumDate,mode:_this.props.datePickerModeAndroid});}catch(_ref2){var message=_ref2.message;console.warn(\"Cannot open date picker\",message);return;}var _picked=picked,action=_picked.action,year=_picked.year,month=_picked.month,day=_picked.day;if(action!==_reactNative.DatePickerAndroid.dismissedAction){var date;if(_this.props.date&&!isNaN(_this.props.date.getTime())){var hour=_this.props.date.getHours();var minute=_this.props.date.getMinutes();date=new Date(year,month,day,hour,minute);}else{date=new Date(year,month,day);}if(_this.props.mode===\"datetime\"){var timeOptions={is24Hour:_this.props.is24Hour,mode:_this.props.timePickerModeAndroid};if(_this.props.date){timeOptions.hour=_this.props.date.getHours();timeOptions.minute=_this.props.date.getMinutes();}var pickedTime;try{pickedTime=yield _reactNative.TimePickerAndroid.open(timeOptions);}catch(_ref3){var _message=_ref3.message;console.warn(\"Cannot open time picker\",_message);return;}var _pickedTime=pickedTime,timeAction=_pickedTime.action,_hour=_pickedTime.hour,_minute=_pickedTime.minute;if(timeAction!==_reactNative.TimePickerAndroid.dismissedAction){var selectedDate=new Date(year,month,day,_hour,_minute);_this.props.onConfirm(selectedDate);_this.props.onHideAfterConfirm(selectedDate);}else{_this.props.onCancel();}}else{_this.props.onConfirm(date);_this.props.onHideAfterConfirm(date);}}else{_this.props.onCancel();}});_this.showTimePickerAndroid=(0,_asyncToGenerator2.default)(function*(){var picked;try{picked=yield _reactNative.TimePickerAndroid.open({hour:_this.props.date.getHours(),minute:_this.props.date.getMinutes(),is24Hour:_this.props.is24Hour,mode:_this.props.timePickerModeAndroid});}catch(_ref5){var message=_ref5.message;console.warn(\"Cannot open time picker\",message);return;}var _picked2=picked,action=_picked2.action,hour=_picked2.hour,minute=_picked2.minute;if(action!==_reactNative.TimePickerAndroid.dismissedAction){var date;if(_this.props.date){var year=_this.props.date.getFullYear();var month=_this.props.date.getMonth();var day=_this.props.date.getDate();date=new Date(year,month,day,hour,minute);}else{date=new Date().setHours(hour).setMinutes(minute);}_this.props.onConfirm(date);_this.props.onHideAfterConfirm(date);}else{_this.props.onCancel();}});return _this;}(0,_createClass2.default)(CustomDatePickerAndroid,[{key:\"render\",value:function render(){return null;}}]);return CustomDatePickerAndroid;}(_react.default.PureComponent);exports.default=CustomDatePickerAndroid;CustomDatePickerAndroid.propTypes={date:_propTypes.default.instanceOf(Date),mode:_propTypes.default.oneOf([\"date\",\"time\",\"datetime\"]),onCancel:_propTypes.default.func.isRequired,onConfirm:_propTypes.default.func.isRequired,onHideAfterConfirm:_propTypes.default.func,is24Hour:_propTypes.default.bool,isVisible:_propTypes.default.bool,datePickerModeAndroid:_propTypes.default.oneOf([\"calendar\",\"spinner\",\"default\"]),timePickerModeAndroid:_propTypes.default.oneOf([\"clock\",\"spinner\",\"default\"]),minimumDate:_propTypes.default.instanceOf(Date),maximumDate:_propTypes.default.instanceOf(Date)};CustomDatePickerAndroid.defaultProps={date:new Date(),mode:\"date\",datePickerModeAndroid:\"default\",timePickerModeAndroid:\"default\",is24Hour:true,isVisible:false,onHideAfterConfirm:function onHideAfterConfirm(){}};","map":{"version":3,"sources":["/Users/uheron/IH/storybookFinalTest/node_modules/react-native-modal-datetime-picker/src/CustomDatePickerAndroid.js"],"names":["CustomDatePickerAndroid","componentDidUpdate","prevProps","isVisible","props","mode","showDatePickerAndroid","catch","console","error","showTimePickerAndroid","componentDidMount","picked","DatePickerAndroid","open","date","minDate","minimumDate","maxDate","maximumDate","datePickerModeAndroid","message","warn","action","year","month","day","dismissedAction","isNaN","getTime","hour","getHours","minute","getMinutes","Date","timeOptions","is24Hour","timePickerModeAndroid","pickedTime","TimePickerAndroid","timeAction","selectedDate","onConfirm","onHideAfterConfirm","onCancel","getFullYear","getMonth","getDate","setHours","setMinutes","React","PureComponent","propTypes","PropTypes","instanceOf","oneOf","func","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DatePickerAndroid, TimePickerAndroid } from \"react-native\";\n\nexport default class CustomDatePickerAndroid extends React.PureComponent {\n  static propTypes = {\n    date: PropTypes.instanceOf(Date),\n    mode: PropTypes.oneOf([\"date\", \"time\", \"datetime\"]),\n    onCancel: PropTypes.func.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    onHideAfterConfirm: PropTypes.func,\n    is24Hour: PropTypes.bool,\n    isVisible: PropTypes.bool,\n    datePickerModeAndroid: PropTypes.oneOf([\"calendar\", \"spinner\", \"default\"]),\n    timePickerModeAndroid: PropTypes.oneOf([\"clock\", \"spinner\", \"default\"]),\n    minimumDate: PropTypes.instanceOf(Date),\n    maximumDate: PropTypes.instanceOf(Date)\n  };\n\n  static defaultProps = {\n    date: new Date(),\n    mode: \"date\",\n    datePickerModeAndroid: \"default\",\n    timePickerModeAndroid: \"default\",\n    is24Hour: true,\n    isVisible: false,\n    onHideAfterConfirm: () => {}\n  };\n\n  componentDidUpdate = prevProps => {\n    if (!prevProps.isVisible && this.props.isVisible) {\n      if (this.props.mode === \"date\" || this.props.mode === \"datetime\") {\n        this.showDatePickerAndroid().catch(console.error);\n      } else {\n        this.showTimePickerAndroid().catch(console.error);\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    if (this.props && this.props.isVisible) {\n      if (this.props.mode === \"date\" || this.props.mode === \"datetime\") {\n        this.showDatePickerAndroid().catch(console.error);\n      } else {\n        this.showTimePickerAndroid().catch(console.error);\n      }\n    }\n  };\n\n  showDatePickerAndroid = async () => {\n    let picked;\n    try {\n      picked = await DatePickerAndroid.open({\n        date: this.props.date,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.datePickerModeAndroid\n      });\n    } catch ({ message }) {\n      console.warn(\"Cannot open date picker\", message);\n      return;\n    }\n\n    const { action, year, month, day } = picked;\n    if (action !== DatePickerAndroid.dismissedAction) {\n      let date;\n      if (this.props.date && !isNaN(this.props.date.getTime())) {\n        let hour = this.props.date.getHours();\n        let minute = this.props.date.getMinutes();\n        date = new Date(year, month, day, hour, minute);\n      } else {\n        date = new Date(year, month, day);\n      }\n\n      if (this.props.mode === \"datetime\") {\n        // Prepopulate and show time picker\n        const timeOptions = {\n          is24Hour: this.props.is24Hour,\n          mode: this.props.timePickerModeAndroid\n        };\n        if (this.props.date) {\n          timeOptions.hour = this.props.date.getHours();\n          timeOptions.minute = this.props.date.getMinutes();\n        }\n\n        let pickedTime;\n        try {\n          pickedTime = await TimePickerAndroid.open(timeOptions);\n        } catch ({ message }) {\n          console.warn(\"Cannot open time picker\", message);\n          return;\n        }\n\n        const { action: timeAction, hour, minute } = pickedTime;\n        if (timeAction !== TimePickerAndroid.dismissedAction) {\n          const selectedDate = new Date(year, month, day, hour, minute);\n          this.props.onConfirm(selectedDate);\n          this.props.onHideAfterConfirm(selectedDate);\n        } else {\n          this.props.onCancel();\n        }\n      } else {\n        this.props.onConfirm(date);\n        this.props.onHideAfterConfirm(date);\n      }\n    } else {\n      this.props.onCancel();\n    }\n  };\n\n  showTimePickerAndroid = async () => {\n    let picked;\n    try {\n      picked = await TimePickerAndroid.open({\n        hour: this.props.date.getHours(),\n        minute: this.props.date.getMinutes(),\n        is24Hour: this.props.is24Hour,\n        mode: this.props.timePickerModeAndroid\n      });\n    } catch ({ message }) {\n      console.warn(\"Cannot open time picker\", message);\n      return;\n    }\n\n    const { action, hour, minute } = picked;\n    if (action !== TimePickerAndroid.dismissedAction) {\n      let date;\n      if (this.props.date) {\n        // This prevents losing the Date elements, see issue #71\n        const year = this.props.date.getFullYear();\n        const month = this.props.date.getMonth();\n        const day = this.props.date.getDate();\n        date = new Date(year, month, day, hour, minute);\n      } else {\n        date = new Date().setHours(hour).setMinutes(minute);\n      }\n      this.props.onConfirm(date);\n      this.props.onHideAfterConfirm(date);\n    } else {\n      this.props.onCancel();\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}