{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _invariant=_interopRequireDefault(require(\"fbjs/lib/invariant\"));var _EventEmitter=_interopRequireDefault(require(\"../../vendor/react-native/emitter/_EventEmitter\"));var _canUseDom=_interopRequireDefault(require(\"../../modules/canUseDom\"));var isPrefixed=_canUseDom.default&&!document.hasOwnProperty('hidden')&&document.hasOwnProperty('webkitHidden');var EVENT_TYPES=['change','memoryWarning'];var VISIBILITY_CHANGE_EVENT=isPrefixed?'webkitvisibilitychange':'visibilitychange';var VISIBILITY_STATE_PROPERTY=isPrefixed?'webkitVisibilityState':'visibilityState';var AppStates={BACKGROUND:'background',ACTIVE:'active'};var changeEmitter=null;var AppState=function(){function AppState(){(0,_classCallCheck2.default)(this,AppState);}(0,_createClass2.default)(AppState,null,[{key:\"currentState\",get:function get(){if(!AppState.isAvailable){return AppStates.ACTIVE;}switch(document[VISIBILITY_STATE_PROPERTY]){case'hidden':case'prerender':case'unloaded':return AppStates.BACKGROUND;default:return AppStates.ACTIVE;}}},{key:\"addEventListener\",value:function addEventListener(type,handler){if(AppState.isAvailable){(0,_invariant.default)(EVENT_TYPES.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);if(type==='change'){if(!changeEmitter){changeEmitter=new _EventEmitter.default();document.addEventListener(VISIBILITY_CHANGE_EVENT,function(){if(changeEmitter){changeEmitter.emit('change',AppState.currentState);}},false);}return changeEmitter.addListener(type,handler);}}}},{key:\"removeEventListener\",value:function removeEventListener(type,handler){if(AppState.isAvailable){console.error(\"AppState.removeListener('\"+type+\"', ...): Method has been \"+'deprecated. Please instead use `remove()` on the subscription '+'returned by `AppState.addEventListener`.');(0,_invariant.default)(EVENT_TYPES.indexOf(type)!==-1,'Trying to remove listener for unknown event: \"%s\"',type);if(type==='change'&&changeEmitter){changeEmitter.removeListener(handler);}}}}]);return AppState;}();exports.default=AppState;AppState.isAvailable=_canUseDom.default&&document[VISIBILITY_STATE_PROPERTY];","map":{"version":3,"sources":["/Users/uheron/IH/storybookFinalTest/node_modules/react-native-web/dist/exports/AppState/index.js"],"names":["isPrefixed","canUseDOM","document","hasOwnProperty","EVENT_TYPES","VISIBILITY_CHANGE_EVENT","VISIBILITY_STATE_PROPERTY","AppStates","BACKGROUND","ACTIVE","changeEmitter","AppState","isAvailable","type","handler","indexOf","EventEmitter","addEventListener","emit","currentState","addListener","console","error","removeListener"],"mappings":"yVASA,qEACA,qGACA,0EAEA,GAAIA,CAAAA,UAAU,CAAGC,oBAAa,CAACC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAd,EAAmDD,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAApE,CACA,GAAIC,CAAAA,WAAW,CAAG,CAAC,QAAD,CAAW,eAAX,CAAlB,CACA,GAAIC,CAAAA,uBAAuB,CAAGL,UAAU,CAAG,wBAAH,CAA8B,kBAAtE,CACA,GAAIM,CAAAA,yBAAyB,CAAGN,UAAU,CAAG,uBAAH,CAA6B,iBAAvE,CACA,GAAIO,CAAAA,SAAS,CAAG,CACdC,UAAU,CAAE,YADE,CAEdC,MAAM,CAAE,QAFM,CAAhB,CAIA,GAAIC,CAAAA,aAAa,CAAG,IAApB,C,GACqBC,CAAAA,Q,8IACnB,cAA0B,CACxB,GAAI,CAACA,QAAQ,CAACC,WAAd,CAA2B,CACzB,MAAOL,CAAAA,SAAS,CAACE,MAAjB,CACD,CAED,OAAQP,QAAQ,CAACI,yBAAD,CAAhB,EACE,IAAK,QAAL,CACA,IAAK,WAAL,CACA,IAAK,UAAL,CACE,MAAOC,CAAAA,SAAS,CAACC,UAAjB,CAEF,QACE,MAAOD,CAAAA,SAAS,CAACE,MAAjB,CAPJ,CASD,C,gCAED,0BAAwBI,IAAxB,CAA8BC,OAA9B,CAAuC,CACrC,GAAIH,QAAQ,CAACC,WAAb,CAA0B,CACxB,uBAAUR,WAAW,CAACW,OAAZ,CAAoBF,IAApB,IAA8B,CAAC,CAAzC,CAA4C,4CAA5C,CAA0FA,IAA1F,EAEA,GAAIA,IAAI,GAAK,QAAb,CAAuB,CACrB,GAAI,CAACH,aAAL,CAAoB,CAClBA,aAAa,CAAG,GAAIM,sBAAJ,EAAhB,CACAd,QAAQ,CAACe,gBAAT,CAA0BZ,uBAA1B,CAAmD,UAAM,CACvD,GAAIK,aAAJ,CAAmB,CACjBA,aAAa,CAACQ,IAAd,CAAmB,QAAnB,CAA6BP,QAAQ,CAACQ,YAAtC,EACD,CACF,CAJD,CAIG,KAJH,EAKD,CAED,MAAOT,CAAAA,aAAa,CAACU,WAAd,CAA0BP,IAA1B,CAAgCC,OAAhC,CAAP,CACD,CACF,CACF,C,mCAED,6BAA2BD,IAA3B,CAAiCC,OAAjC,CAA0C,CACxC,GAAIH,QAAQ,CAACC,WAAb,CAA0B,CACxBS,OAAO,CAACC,KAAR,CAAc,4BAA8BT,IAA9B,CAAqC,2BAArC,CAAmE,gEAAnE,CAAsI,0CAApJ,EACA,uBAAUT,WAAW,CAACW,OAAZ,CAAoBF,IAApB,IAA8B,CAAC,CAAzC,CAA4C,mDAA5C,CAAiGA,IAAjG,EAEA,GAAIA,IAAI,GAAK,QAAT,EAAqBH,aAAzB,CAAwC,CACtCA,aAAa,CAACa,cAAd,CAA6BT,OAA7B,EACD,CACF,CACF,C,iDAGHH,QAAQ,CAACC,WAAT,CAAuBX,oBAAaC,QAAQ,CAACI,yBAAD,CAA5C","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from '../../vendor/react-native/emitter/_EventEmitter';\nimport canUseDOM from '../../modules/canUseDom'; // Android 4.4 browser\n\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\nexport default class AppState {\n  static get currentState() {\n    if (!AppState.isAvailable) {\n      return AppStates.ACTIVE;\n    }\n\n    switch (document[VISIBILITY_STATE_PROPERTY]) {\n      case 'hidden':\n      case 'prerender':\n      case 'unloaded':\n        return AppStates.BACKGROUND;\n\n      default:\n        return AppStates.ACTIVE;\n    }\n  }\n\n  static addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new EventEmitter();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, () => {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  }\n\n  static removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  }\n\n}\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];"]},"metadata":{},"sourceType":"script"}