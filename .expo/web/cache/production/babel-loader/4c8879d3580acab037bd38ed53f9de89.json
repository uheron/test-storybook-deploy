{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useWindowDimensions;var _Dimensions=_interopRequireDefault(require(\"../Dimensions\"));var _react=require(\"react\");function useWindowDimensions(){var _useState=(0,_react.useState)(function(){return _Dimensions.default.get('window');}),dims=_useState[0],setDims=_useState[1];(0,_react.useEffect)(function(){function handleChange(_ref){var window=_ref.window;if(window!=null){setDims(window);}}_Dimensions.default.addEventListener('change',handleChange);setDims(_Dimensions.default.get('window'));return function(){_Dimensions.default.removeEventListener('change',handleChange);};},[]);return dims;}","map":{"version":3,"sources":["/Users/uheron/IH/storybookFinalTest/node_modules/react-native-web/dist/exports/useWindowDimensions/index.js"],"names":["useWindowDimensions","_useState","Dimensions","get","dims","setDims","handleChange","_ref","window","addEventListener","removeEventListener"],"mappings":"AASA,a,gLAEA,iEACA,4BACe,QAASA,CAAAA,mBAAT,EAA+B,CAC5C,GAAIC,CAAAA,SAAS,CAAG,oBAAS,iBAAMC,qBAAWC,GAAX,CAAe,QAAf,CAAN,EAAT,CAAhB,CACIC,IAAI,CAAGH,SAAS,CAAC,CAAD,CADpB,CAEII,OAAO,CAAGJ,SAAS,CAAC,CAAD,CAFvB,CAIA,qBAAU,UAAM,CACd,QAASK,CAAAA,YAAT,CAAsBC,IAAtB,CAA4B,CAC1B,GAAIC,CAAAA,MAAM,CAAGD,IAAI,CAACC,MAAlB,CAEA,GAAIA,MAAM,EAAI,IAAd,CAAoB,CAClBH,OAAO,CAACG,MAAD,CAAP,CACD,CACF,CAEDN,oBAAWO,gBAAX,CAA4B,QAA5B,CAAsCH,YAAtC,EAIAD,OAAO,CAACH,oBAAWC,GAAX,CAAe,QAAf,CAAD,CAAP,CACA,MAAO,WAAM,CACXD,oBAAWQ,mBAAX,CAA+B,QAA/B,CAAyCJ,YAAzC,EACD,CAFD,CAGD,CAjBD,CAiBG,EAjBH,EAkBA,MAAOF,CAAAA,IAAP,CACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(() => Dimensions.get('window')),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(() => {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (window != null) {\n        setDims(window);\n      }\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}"]},"metadata":{},"sourceType":"script"}